{
	"info": {
		"_postman_id": "12345678-1234-1234-1234-123456789012",
		"name": "Laravel Admin Backend API",
		"description": "Comprehensive API collection for Laravel Admin Backend with authentication, content management, and testing capabilities.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success property\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});",
									"",
									"pm.test(\"Response contains token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('token');",
									"    pm.environment.set('auth_token', jsonData.data.token);",
									"});",
									"",
									"pm.test(\"Response contains user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"    pm.expect(jsonData.data.user).to.have.property('id');",
									"    pm.expect(jsonData.data.user).to.have.property('username');",
									"    pm.expect(jsonData.data.user).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{admin_username}}\",\n    \"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/admin/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"auth",
								"login"
							]
						},
						"description": "Authenticate admin user and receive JWT/Sanctum token"
					},
					"response": []
				},
				{
					"name": "Get Current User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/auth/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"auth",
								"me"
							]
						},
						"description": "Get current authenticated admin user information"
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains new token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('token');",
									"    pm.environment.set('auth_token', jsonData.data.token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/auth/refresh",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"auth",
								"refresh"
							]
						},
						"description": "Refresh the current authentication token"
					},
					"response": []
				},
				{
					"name": "Admin Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Logout successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.environment.unset('auth_token');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"auth",
								"logout"
							]
						},
						"description": "Logout admin user and invalidate token"
					},
					"response": []
				}
			],
			"description": "Admin authentication endpoints for login, logout, token refresh, and user information"
		},
		{
			"name": "Hero Section",
			"item": [
				{
					"name": "Get Hero Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains hero data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('greeting_vi');",
									"    pm.expect(jsonData.data).to.have.property('greeting_en');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/hero",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"hero"
							]
						},
						"description": "Retrieve current hero section content"
					},
					"response": []
				},
				{
					"name": "Update Hero Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Hero updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"greeting_vi\": \"Xin chào, tôi là\",\n    \"greeting_en\": \"Hello, I'm\",\n    \"name\": \"Nhật Anh\",\n    \"title_vi\": \"Lập trình viên Fullstack\",\n    \"title_en\": \"Fullstack Developer\",\n    \"subtitle_vi\": \"Chuyên về phát triển web hiện đại với Laravel và Vue.js\",\n    \"subtitle_en\": \"Specialized in modern web development with Laravel and Vue.js\",\n    \"cta_text_vi\": \"Xem dự án của tôi\",\n    \"cta_text_en\": \"View My Projects\",\n    \"cta_link\": \"#projects\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/admin/hero",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"hero"
							]
						},
						"description": "Update hero section content with bilingual support"
					},
					"response": []
				}
			],
			"description": "Hero section content management endpoints"
		},
		{
			"name": "Services",
			"item": [
				{
					"name": "Get All Services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains services data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData).to.have.property('data');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/services?per_page=15",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"services"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								}
							]
						},
						"description": "Retrieve paginated list of services"
					},
					"response": []
				},
				{
					"name": "Create Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Service created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.environment.set('service_id', jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title_vi\": \"Phát triển Web\",\n    \"title_en\": \"Web Development\",\n    \"description_vi\": \"Phát triển ứng dụng web hiện đại với Laravel, Vue.js và các công nghệ tiên tiến\",\n    \"description_en\": \"Modern web application development with Laravel, Vue.js and cutting-edge technologies\",\n    \"icon\": \"fas fa-code\",\n    \"color\": \"#3B82F6\",\n    \"bg_color\": \"#EFF6FF\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/admin/services",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"services"
							]
						},
						"description": "Create a new service with bilingual content"
					},
					"response": []
				},
				{
					"name": "Get Service by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains service data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/services/{{service_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"services",
								"{{service_id}}"
							]
						},
						"description": "Get a specific service by ID"
					},
					"response": []
				},
				{
					"name": "Update Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Service updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title_vi\": \"Phát triển Web (Cập nhật)\",\n    \"title_en\": \"Web Development (Updated)\",\n    \"description_vi\": \"Phát triển ứng dụng web hiện đại với Laravel, Vue.js và các công nghệ tiên tiến - Đã cập nhật\",\n    \"description_en\": \"Modern web application development with Laravel, Vue.js and cutting-edge technologies - Updated\",\n    \"icon\": \"fas fa-laptop-code\",\n    \"color\": \"#10B981\",\n    \"bg_color\": \"#ECFDF5\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/admin/services/{{service_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"services",
								"{{service_id}}"
							]
						},
						"description": "Update an existing service"
					},
					"response": []
				},
				{
					"name": "Reorder Services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Services reordered successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"order\": [\n        {\"id\": 1, \"order\": 1},\n        {\"id\": 2, \"order\": 2},\n        {\"id\": 3, \"order\": 3}\n    ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/admin/services/reorder",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"services",
								"reorder"
							]
						},
						"description": "Reorder services by updating their order values"
					},
					"response": []
				},
				{
					"name": "Delete Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/services/{{service_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"services",
								"{{service_id}}"
							]
						},
						"description": "Delete a service"
					},
					"response": []
				}
			],
			"description": "Services CRUD operations and management"
		},
		{
			"name": "About Section",
			"item": [
				{
					"name": "Get About Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains about data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('content_vi');",
									"    pm.expect(jsonData.data).to.have.property('content_en');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/about",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"about"
							]
						},
						"description": "Retrieve current about section content"
					},
					"response": []
				},
				{
					"name": "Update About Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"About updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content_vi\": \"Tôi là một lập trình viên fullstack với hơn 5 năm kinh nghiệm trong việc phát triển ứng dụng web hiện đại. Chuyên về Laravel, Vue.js và các công nghệ web tiên tiến.\",\n    \"content_en\": \"I am a fullstack developer with over 5 years of experience in developing modern web applications. Specialized in Laravel, Vue.js and cutting-edge web technologies.\",\n    \"skills\": [\"Laravel\", \"Vue.js\", \"PHP\", \"JavaScript\", \"MySQL\", \"Redis\"],\n    \"experience_years\": 5,\n    \"projects_completed\": 50\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/admin/about",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"about"
							]
						},
						"description": "Update about section content with bilingual support"
					},
					"response": []
				},
				{
					"name": "Upload Profile Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Image uploaded successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('image_url');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"type": "file",
									"src": [],
									"description": "Profile image file (JPG, PNG, WebP)"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/admin/about/image",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"about",
								"image"
							]
						},
						"description": "Upload profile image for about section"
					},
					"response": []
				}
			],
			"description": "About section content management with image upload"
		},
		{
			"name": "Blog Posts",
			"item": [
				{
					"name": "Get All Blog Posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains blog posts data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData).to.have.property('data');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/blog?per_page=15&status=published",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"blog"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								},
								{
									"key": "status",
									"value": "published",
									"description": "Filter by status: draft, published"
								}
							]
						},
						"description": "Retrieve paginated list of blog posts with status filtering"
					},
					"response": []
				},
				{
					"name": "Create Blog Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Blog post created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.environment.set('blog_post_id', jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title_vi\": \"Hướng dẫn Laravel 10\",\n    \"title_en\": \"Laravel 10 Tutorial\",\n    \"content_vi\": \"# Giới thiệu Laravel 10\\n\\nLaravel 10 là phiên bản mới nhất của framework PHP phổ biến...\",\n    \"content_en\": \"# Introduction to Laravel 10\\n\\nLaravel 10 is the latest version of the popular PHP framework...\",\n    \"excerpt_vi\": \"Tìm hiểu về các tính năng mới trong Laravel 10\",\n    \"excerpt_en\": \"Learn about new features in Laravel 10\",\n    \"status\": \"draft\",\n    \"tags\": [\"Laravel\", \"PHP\", \"Tutorial\", \"Web Development\"]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/admin/blog",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"blog"
							]
						},
						"description": "Create a new blog post with markdown content"
					},
					"response": []
				},
				{
					"name": "Get Blog Post by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains blog post data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('status');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/blog/{{blog_post_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"blog",
								"{{blog_post_id}}"
							]
						},
						"description": "Get a specific blog post by ID"
					},
					"response": []
				},
				{
					"name": "Update Blog Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Blog post updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title_vi\": \"Hướng dẫn Laravel 10 (Cập nhật)\",\n    \"title_en\": \"Laravel 10 Tutorial (Updated)\",\n    \"content_vi\": \"# Giới thiệu Laravel 10 - Cập nhật\\n\\nLaravel 10 là phiên bản mới nhất với nhiều cải tiến...\",\n    \"content_en\": \"# Introduction to Laravel 10 - Updated\\n\\nLaravel 10 is the latest version with many improvements...\",\n    \"excerpt_vi\": \"Tìm hiểu về các tính năng mới và cải tiến trong Laravel 10\",\n    \"excerpt_en\": \"Learn about new features and improvements in Laravel 10\",\n    \"status\": \"published\",\n    \"tags\": [\"Laravel\", \"PHP\", \"Tutorial\", \"Web Development\", \"Updated\"]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/admin/blog/{{blog_post_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"blog",
								"{{blog_post_id}}"
							]
						},
						"description": "Update an existing blog post"
					},
					"response": []
				},
				{
					"name": "Publish Blog Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Blog post published successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data.status).to.equal('published');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/blog/{{blog_post_id}}/publish",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"blog",
								"{{blog_post_id}}",
								"publish"
							]
						},
						"description": "Publish a draft blog post"
					},
					"response": []
				},
				{
					"name": "Delete Blog Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/blog/{{blog_post_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"blog",
								"{{blog_post_id}}"
							]
						},
						"description": "Delete a blog post"
					},
					"response": []
				}
			],
			"description": "Blog posts management with publishing workflow"
		},
		{
			"name": "Contact Management",
			"item": [
				{
					"name": "Get Contact Messages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains contact messages\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData).to.have.property('data');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/contacts/messages?per_page=20&read=false",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"contacts",
								"messages"
							],
							"query": [
								{
									"key": "per_page",
									"value": "20"
								},
								{
									"key": "read",
									"value": "false",
									"description": "Filter by read status"
								}
							]
						},
						"description": "Retrieve paginated list of contact messages"
					},
					"response": []
				},
				{
					"name": "Get Contact Message by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains message data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/contacts/messages/{{contact_message_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"contacts",
								"messages",
								"{{contact_message_id}}"
							]
						},
						"description": "Get a specific contact message by ID"
					},
					"response": []
				},
				{
					"name": "Mark Message as Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Message marked as read\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/contacts/messages/{{contact_message_id}}/read",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"contacts",
								"messages",
								"{{contact_message_id}}",
								"read"
							]
						},
						"description": "Mark a contact message as read"
					},
					"response": []
				},
				{
					"name": "Bulk Mark as Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Messages marked as read\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"message_ids\": [1, 2, 3, 4, 5]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/admin/contacts/messages/bulk-read",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"contacts",
								"messages",
								"bulk-read"
							]
						},
						"description": "Mark multiple messages as read"
					},
					"response": []
				},
				{
					"name": "Delete Contact Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/contacts/messages/{{contact_message_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"contacts",
								"messages",
								"{{contact_message_id}}"
							]
						},
						"description": "Delete a contact message"
					},
					"response": []
				},
				{
					"name": "Get Contact Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains contact info\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/contacts/info",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"contacts",
								"info"
							]
						},
						"description": "Get contact information settings"
					},
					"response": []
				},
				{
					"name": "Update Contact Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contact info updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"contact@nhatanh.dev\",\n    \"phone\": \"+84 123 456 789\",\n    \"address\": \"Ho Chi Minh City, Vietnam\",\n    \"social_links\": {\n        \"github\": \"https://github.com/nhatanh\",\n        \"linkedin\": \"https://linkedin.com/in/nhatanh\",\n        \"twitter\": \"https://twitter.com/nhatanh\"\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/admin/contacts/info",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"contacts",
								"info"
							]
						},
						"description": "Update contact information and social links"
					},
					"response": []
				}
			],
			"description": "Contact messages and information management"
		},
		{
			"name": "System Settings",
			"item": [
				{
					"name": "Get System Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains settings data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData).to.have.property('data');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/settings",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"settings"
							]
						},
						"description": "Retrieve current system settings"
					},
					"response": []
				},
				{
					"name": "Update System Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Settings updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"site_name\": \"Nhật Anh Dev\",\n    \"default_language\": \"vi\",\n    \"maintenance_mode\": false,\n    \"theme\": {\n        \"primary_color\": \"#3B82F6\",\n        \"secondary_color\": \"#10B981\",\n        \"accent_color\": \"#F59E0B\"\n    },\n    \"seo\": {\n        \"meta_title\": \"Nhật Anh - Freelance Fullstack Developer\",\n        \"meta_description\": \"Professional fullstack developer specializing in Laravel and Vue.js\",\n        \"meta_keywords\": \"Laravel, Vue.js, PHP, JavaScript, Fullstack Developer\"\n    }\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/admin/settings",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"settings"
							]
						},
						"description": "Update system settings including theme and SEO"
					},
					"response": []
				},
				{
					"name": "Toggle Maintenance Mode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Maintenance mode toggled\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('maintenance_mode');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/settings/maintenance",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"settings",
								"maintenance"
							]
						},
						"description": "Toggle maintenance mode on/off"
					},
					"response": []
				}
			],
			"description": "System configuration and settings management"
		},
		{
			"name": "Projects",
			"item": [
				{
					"name": "Get All Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains projects data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData).to.have.property('data');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/projects?per_page=15&category=web&featured=true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"projects"
							],
							"query": [
								{
									"key": "per_page",
									"value": "15"
								},
								{
									"key": "category",
									"value": "web",
									"description": "Filter by category"
								},
								{
									"key": "featured",
									"value": "true",
									"description": "Filter by featured status"
								}
							]
						},
						"description": "Retrieve paginated list of projects with filtering"
					},
					"response": []
				},
				{
					"name": "Create Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Project created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.environment.set('project_id', jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title_vi\": \"Ứng dụng E-commerce\",\n    \"title_en\": \"E-commerce Application\",\n    \"description_vi\": \"Ứng dụng thương mại điện tử hiện đại với Laravel và Vue.js\",\n    \"description_en\": \"Modern e-commerce application built with Laravel and Vue.js\",\n    \"image\": \"https://example.com/project-image.jpg\",\n    \"link\": \"https://ecommerce-demo.com\",\n    \"technologies\": [\"Laravel\", \"Vue.js\", \"MySQL\", \"Redis\"],\n    \"category\": \"web\",\n    \"featured\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/admin/projects",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"projects"
							]
						},
						"description": "Create a new project with image and technology details"
					},
					"response": []
				},
				{
					"name": "Get Project by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains project data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('technologies');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/projects/{{project_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"projects",
								"{{project_id}}"
							]
						},
						"description": "Get a specific project by ID"
					},
					"response": []
				},
				{
					"name": "Update Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Project updated successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title_vi\": \"Ứng dụng E-commerce (Cập nhật)\",\n    \"title_en\": \"E-commerce Application (Updated)\",\n    \"description_vi\": \"Ứng dụng thương mại điện tử hiện đại với Laravel và Vue.js - Đã cập nhật\",\n    \"description_en\": \"Modern e-commerce application built with Laravel and Vue.js - Updated\",\n    \"image\": \"https://example.com/updated-project-image.jpg\",\n    \"link\": \"https://ecommerce-demo-updated.com\",\n    \"technologies\": [\"Laravel\", \"Vue.js\", \"MySQL\", \"Redis\", \"Docker\"],\n    \"category\": \"web\",\n    \"featured\": false\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/admin/projects/{{project_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"projects",
								"{{project_id}}"
							]
						},
						"description": "Update an existing project"
					},
					"response": []
				},
				{
					"name": "Toggle Project Featured",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Featured status toggled\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData.success).to.be.true;",
									"    pm.expect(jsonData.data).to.have.property('featured');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/projects/{{project_id}}/toggle-featured",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"projects",
								"{{project_id}}",
								"toggle-featured"
							]
						},
						"description": "Toggle the featured status of a project"
					},
					"response": []
				},
				{
					"name": "Delete Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/admin/projects/{{project_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"projects",
								"{{project_id}}"
							]
						},
						"description": "Delete a project"
					},
					"response": []
				}
			],
			"description": "Portfolio projects management with image handling and categorization"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-refresh token if needed",
					"const token = pm.environment.get('auth_token');",
					"if (!token && pm.info.requestName !== 'Admin Login') {",
					"    console.log('No auth token found. Please login first.');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test for response time",
					"pm.test(\"Response time is less than 2000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(2000);",
					"});",
					"",
					"// Global test for content type",
					"pm.test(\"Content-Type is application/json\", function () {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://127.0.0.1:8000",
			"type": "string"
		}
	]
}
